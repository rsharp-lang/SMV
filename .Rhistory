install.packages("roxygen2")
install.packages("Rtools")
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
a <- c(1,2,3,4,5,6,7,8,9,101,211,2321,22,23,24,25,26,333,334,556)
numeric.block(a, function(x,y) abs(x-y) <= 1)
library(VisualBasic.R)
a <- c(1,2,3,4,5,6,7,8,9,101,211,2321,22,23,24,25,26,333,334,556)
numeric.block(a, function(x,y) abs(x-y) <= 1)
numeric.block(a, function(x,y) abs(x-y) <= 10)
numeric.block(a, function(x,y) abs(x-y) <= 100)
a
numeric.group(a, function(x,y) abs(x-y) <= 100)
numeric.group(a, function(x,y) abs(x-y) <= 1)
numeric.block(a, function(x,y) abs(x-y) <= 1)
library(VisualBasic.R)
library(VisualBasic.R)
run.localTask <- function(args = NULL) {
require(biodeepMSMS);
application <- args$application;
rdaNames    <- args$rdaNames;
mode        <- args$mode;
# kegg organism index function
organism    <- args$organism;
denoise     <- args$denoise;
n_threads <- args$n_threads;
ms1.removes <- args$ms1.removes;
DIA_impute <- args$DIA_impute;
if (mode == 1) {
input     <- args$input$pos;
output    <- args$out$pos;
peaktable <- args$peaktable$pos;
} else {
input     <- args$input$neg;
output    <- args$out$neg;
peaktable <- args$peaktable$neg;
}
# > doMSMSalignment
# function (mzXML, libType = 1, xcms.deconvolution = optimize.UPLC_Orbitrap(),
#          rdaNames = doMSMSalignment.rdaNames(), insilicons = c("metlin.insilicons.rda"),
#          groups.ref = doMSMSalignment.groups.rdaNames(), using.group_hits = TRUE,
#          using.insilicons = FALSE, precursor_type = "auto", RIRef.mzXML = NULL,
#          RIref = "RI.ref.csv", peakTable.csv = NULL, replace.directly = TRUE,
#          outputdir = "./", outputfile = "doMSMSalignment.report1.csv",
#          ms1.ppm = 30, rt.error.cutoff = 0.65, dotCutoff = c(0.8, 0.8, 0.8, 0.8, 0.8),
#          mz.range = c(50, 1000), zeroV.skip = TRUE,
#          mysql = NULL, m.ppm = 20, into.cutoff = 0.05, test.dataset = NULL,
#          method = "SSM", enable.skips = TRUE, species = NA, peptides.action = special.removes,
#          drugs.action = special.removes, toxicants.action = special.includes,
#          ms2.comfirm.score = 0.85, SSM.weight = c(1, 1, 0.9, 0.9,
#                                                   0.85), de_isotope = TRUE, logs.enable = TRUE, two.side.SSM = TRUE,
#          two.side.hits = TRUE, low.resolution = TRUE, baseline.removes.parallel = FALSE,
#          run.parallel = FALSE, AB5600 = FALSE, ms2.as.peaktable = TRUE,
#          unique.disable = FALSE, filter.enable = FALSE, metaDNA.enable = FALSE,
#          hits.metaDNA = FALSE, debug = FALSE, drugs.drop_right = 0.85)
# {
# c("QE", "orbitrap", "AB5600"),
if (application == "QE") {
devNull <- doMSMSalignment(input,
libtype       = mode,
peaktable.csv = peaktable,
outputdir     = output,
min.pct       = args$min.pct,
min.rt        = args$min.rt,
metaDNA.enable = args$metaDNA.enable,
ms1ppm         = args$ms1.ppm,
dotCutoff      = args$dotCutoff,
precursor_type = args$precursor_type,
pvalue.cutoff = args$pvalue.cutoff,
shared.top =  args$shared.top,
metaDNA.dotcutoff = args$metaDNA.dotcutoff,
min.mirror = args$min.mirror,
organism.priority = organism,
rdaNames = rdaNames,
denoise = denoise,
n_threads = n_threads,
ms1.removes = ms1.removes,
DIA_impute = DIA_impute
);
} else if (application == "AB5600") {
devNull <- doMSMSalignment.AB5600(input,
libtype       = mode,
peaktable.csv = peaktable,
outputdir     = output,
min.pct       = args$min.pct,
min.rt        = args$min.rt,
metaDNA.enable = args$metaDNA.enable,
ms1ppm         = args$ms1.ppm,
dotCutoff      = args$dotCutoff,
precursor_type = args$precursor_type,
pvalue.cutoff = args$pvalue.cutoff,
shared.top=  args$shared.top,
metaDNA.dotcutoff = args$metaDNA.dotcutoff,
min.mirror = args$min.mirror,
organism.priority = organism,
denoise = denoise,
n_threads = n_threads,
ms1.removes = ms1.removes,
DIA_impute = DIA_impute
);
} else {
devNull <- doMSMSalignment.orbitrap(input,
libtype       = mode,
peaktable.csv = peaktable,
outputdir     = output,
min.pct       = args$min.pct,
min.rt        = args$min.rt,
metaDNA.enable = args$metaDNA.enable,
ms1ppm         = args$ms1.ppm,
dotCutoff      = args$dotCutoff,
precursor_type = args$precursor_type,
pvalue.cutoff = args$pvalue.cutoff,
shared.top=  args$shared.top,
metaDNA.dotcutoff = args$metaDNA.dotcutoff,
min.mirror = args$min.mirror,
organism.priority = organism,
denoise = denoise,
n_threads = n_threads,
ms1.removes = ms1.removes,
DIA_impute = DIA_impute
);
}
}
Rscript = capture.output(run.localTask);
Rscript
Rscript = Rscript[2:(length(Rscript)-1)];
Rscript
paste
Rscript = capture.output(run.localTask);
Rscript = paste(Rscript[2:(length(Rscript)-1)], collapse = "\n");
Rscript
writeLines()
writeLines
library(VisualBasic.R)
functionText = function(func) {
text = capture.output(closure);
}
functionBody()
functionBody(functionText)
functionBody(slave)
a = functionBody(slave)
a
a()
eval(a)
docker::run
docker::volumeBind
load("D:/biodeep/biodeep_pipeline/libdata/BA_neg.rda")
ls()
lib.pos
lib.neg
lib.neg[[1]]
str(lib.neg[[1]])
lib.neg[[1]]$precursor_mz
load("D:/biodeep/biodeep_pipeline/libdata/BA_neg.rda")
lib.neg[[1]]$precursor_mz
load("//192.168.1.254/backup3/项目以外内容/2021/研发/untargeted update-bile acids/neg bile acids 40 mix standard/mzXML/BA_neg.rda")
lib.neg
lib.neg[[1]]
lib.neg[[1]]$metainfo
str(lib.neg[[1]]$metainfo)
lib.neg[[1]]$precursor_mz
library(VisualBasic.R)
xLoad
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
commandArgs = function(...) {
argv = list(...);
}
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files.")
)
commandArgs = function(...) {
argv = list(...);
str(argv);
}
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files.")
)
base::commandArgs()
library(VisualBasic.R)
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files.")
)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files.")
)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = TRUE
)
commandArgs
commandArgs = function(..., debug = FALSE) {
argv = list(...);
cmdl = VisualBasic.R::argv();
if (length(argv) == 0) {
return(cmdl);
} else if (debug) {
print("View of the input commandline arguments:");
str(cmdl);
}
str(argv);
}
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = TRUE
)
Trim
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = TRUE
)
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = TRUE
)
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = TRUE
)
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
)
str(commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
))
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
)
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
)
str(commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
))
library(VisualBasic.R)
str(commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
))
library(VisualBasic.R)
commandArgs(
"--raw"       = c(required = TRUE,  "the raw data source must be provided!", "A directory that contains GCxGC table files."),
"--outputdir" = c(required = FALSE, "${--raw}/output/", "A directory path that used for output result data files."),
debug = c("--raw" , "aaaa")
)
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
library(VisualBasic.R)
setwd("D:/visualbasic.R/Rpackage/test")
require(Rcpp)
Rcpp.package.skeleton("VisualBasic.R",
example_code=TRUE,
attributes=TRUE,
cpp_files=c("conv1.cpp"))
require(Rcpp)
compileAttributes()
compileAttributes()
library(VisualBasic.R)
library(VisualBasic.R)
json = ReadAllText("D:\\biodeep\\bile_acids-2022\\ba38_2022.json")
json = decode_rjson(json)
json$lib.neg$`12-ketoLCA`$spectra$`12-ketoLCA_1_[M-H]-`
json
lib.pos = json$lib.pos
lib.neg = json$lib.neg
source('D:/biodeep/bile_acids-2022/scripts/rda.R')
source('D:/biodeep/bile_acids-2022/scripts/rda.R')
source('D:/biodeep/bile_acids-2022/scripts/rda.R')
source('D:/biodeep/bile_acids-2022/scripts/rda.R')
View(lib.neg)
lib.neg[["a-MCA"]][["spectra"]][["a-MCA_1_[M-H]-"]]
lib.neg[["a-MCA"]][["precursor_mz"]]
lib.neg[["a-MCA"]][["metainfo"]]
